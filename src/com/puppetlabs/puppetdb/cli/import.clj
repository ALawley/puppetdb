;; ## Import utility
;;
;; This is a command-line tool for importing data into PuppetDB.  It expects
;; as input a tarball generated by the PuppetDB `export` command-line tool.

(ns com.puppetlabs.puppetdb.cli.import
  (:require [fs.core :as fs]
            [clojure.tools.logging :as log]
            [com.puppetlabs.puppetdb.command :as command]
            [com.puppetlabs.http :as pl-http]
            [cheshire.core :as json])
  (:use [com.puppetlabs.utils :only (cli!)]))

(def cli-description "Import PuppetDB catalog data from a backup file")

(defn submit-catalog
  "Send the given wire-format `catalog` (associated with `host`) to a
  command-processing endpoint located at `puppetdb-host`:`puppetdb-port`."
  [puppetdb-host puppetdb-port catalog]
;; TODO: read metadata file to determine what version of command to use
  (let [result (command/submit-command-via-http! puppetdb-host puppetdb-port "replace catalog" 2 (json/generate-string catalog))]
    (when-not (= pl-http/status-ok (:status result))
      (log/error result))))

(defn -main
  [& args]
  (let [specs       [["-i" "--infile" "Path to backup file (required)"]]
        required    [:infile]
        [options _] (cli! args specs required)]
;; TODO: support tarball, tmp dir for extracting archive
;; TODO: configure puppetdb host / port; either via --config to read the inifile,
;;   or as separate command-line args
;; TODO: do we need to deal with SSL or can we assume this only works over a plaintext port?
    (let [path (fs/file (:infile options) "puppetdb_bak" "catalogs")]
      (doseq [catalog-file (fs/glob (fs/file path "*.json"))]
        (println catalog-file)
      ;; NOTE: these submissions are async and we have no guarantee that they
      ;;   will succeed.  We might want to add something at the end of the import
      ;;   that polls puppetdb until the command queue is empty, then does a
      ;;   query to the /nodes endpoint and shows the set difference between
      ;;   the list of nodes that we submitted and the output of that query
        (submit-catalog "localhost" 8080
          (json/parse-string (slurp catalog-file)))))))
